[{"path":"https://epiforesite.github.io/epitraxr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 epitraxr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiforesite.github.io/epitraxr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Pulsipher. Author, maintainer.","code":""},{"path":"https://epiforesite.github.io/epitraxr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pulsipher (2025). epitraxr: Manipulate Epitrax Data Generate Reports. R package version 0.1.0, https://epiforesite.github.io/epitraxr/.","code":"@Manual{,   title = {epitraxr: Manipulate Epitrax Data And Generate Reports},   author = {Andrew Pulsipher},   year = {2025},   note = {R package version 0.1.0},   url = {https://epiforesite.github.io/epitraxr/}, }"},{"path":"https://epiforesite.github.io/epitraxr/index.html","id":"epitraxr","dir":"","previous_headings":"","what":"Manipulate Epitrax Data And Generate Reports","title":"Manipulate Epitrax Data And Generate Reports","text":"goal epitraxr simplify process manipulating Epitrax data generating reports. package targeted toward public health officials.","code":""},{"path":"https://epiforesite.github.io/epitraxr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manipulate Epitrax Data And Generate Reports","text":"can install development version epitraxr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EpiForeSITE/epitraxr\")"},{"path":"https://epiforesite.github.io/epitraxr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Manipulate Epitrax Data And Generate Reports","text":"","code":"# Read the sample EpiTrax dataset included with the package sample_file <- system.file(\"sample_data\", \"sample_epitrax_data.csv\", package = \"epitraxr\") epitrax_data <- read_epitrax_data(sample_file)  # Get the list of diseases in the dataset diseases <- unique(epitrax_data$disease)  # Set up configuration config <- list(   current_population = 102000,   avg_5yr_population = 97000,   rounding_decimals = 1 )  # Generate monthly counts report for 2024 monthly_counts <- create_report_monthly_counts(   data = epitrax_data,   y = 2024,   disease_names = diseases ) monthly_counts #>      disease Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 1 Chickenpox  26  19  22  40  16  23  37  16  21  27  14  31 #> 2   COVID-19  81  99  84 120  89 101 125  93  80 117  99 103 #> 3  Influenza 116  96 130 151 115 100 139 135 113 138  96 137 #> 4    Measles  22  21  26  27  16  19  35  25  18  32  25  38 #> 5   Syphilis  22  22  23  24  18  29  15  20  13  23  21  39  # Generate YTD counts with rates per 100k (through May) ytd_report <- create_report_ytd_counts(   data = epitrax_data,   disease_names = diseases,   y = 2024,   m = 5,   config = config,   as.rates = TRUE ) ytd_report #>      disease Current_YTD_Rate_per_100k Avg_5yr_YTD_Rate_per_100k #> 1 Chickenpox                     286.3                     107.6 #> 2   COVID-19                    1167.6                     630.9 #> 3  Influenza                    1437.3                     693.8 #> 4    Measles                     298.0                     151.8 #> 5   Syphilis                     263.7                     166.8"},{"path":"https://epiforesite.github.io/epitraxr/reference/clear_old_reports.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear out old reports before generating new ones. — clear_old_reports","title":"Clear out old reports before generating new ones. — clear_old_reports","text":"clear_old_reports deletes reports previous runs returns list reports deleted.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/clear_old_reports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear out old reports before generating new ones. — clear_old_reports","text":"","code":"clear_old_reports(i_folder, p_folder)"},{"path":"https://epiforesite.github.io/epitraxr/reference/clear_old_reports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear out old reports before generating new ones. — clear_old_reports","text":"i_folder Filepath. Folder containing internal reports. p_folder Filepath. Folder containing public reports.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/clear_old_reports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear out old reports before generating new ones. — clear_old_reports","text":"list old reports cleared.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/clear_old_reports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear out old reports before generating new ones. — clear_old_reports","text":"","code":"if (FALSE) { # \\dontrun{   clear_old_reports(\"internal_reports\", \"public_reports\") } # }"},{"path":"https://epiforesite.github.io/epitraxr/reference/convert_counts_to_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert case counts to rate — convert_counts_to_rate","title":"Convert case counts to rate — convert_counts_to_rate","text":"'convert_counts_to_rate' converts case counts given population adjusted per population size X rounds given number digits.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/convert_counts_to_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert case counts to rate — convert_counts_to_rate","text":"","code":"convert_counts_to_rate(counts, pop, digits, rate_adj_pop = 1e+05)"},{"path":"https://epiforesite.github.io/epitraxr/reference/convert_counts_to_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert case counts to rate — convert_counts_to_rate","text":"counts Integer(s). Case counts convert. pop Integer. Population size cases counted. digits Integer. Number decimals round . rate_adj_pop Integer. Optional target population use rate. Defaults 100k.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/convert_counts_to_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert case counts to rate — convert_counts_to_rate","text":"count(s) rates per rate_adj_pop.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/convert_counts_to_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert case counts to rate — convert_counts_to_rate","text":"","code":"convert_counts_to_rate(50, 200000, 2) #> [1] 25 convert_counts_to_rate(c(10, 20), 100000, 1, 10000) #> [1] 1 2"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_filesystem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create filesystem — create_filesystem","title":"Create filesystem — create_filesystem","text":"create_filesystem creates given folders already exist.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_filesystem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create filesystem — create_filesystem","text":"","code":"create_filesystem(internal, public, settings)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_filesystem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create filesystem — create_filesystem","text":"internal Filepath. Folder hold internal reports. public Filepath. Folder hold public reports. settings Filepath. Folder hold report settings.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_filesystem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create filesystem — create_filesystem","text":"NULL.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_filesystem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create filesystem — create_filesystem","text":"","code":"if (FALSE) { # \\dontrun{   internal_folder <- \"internal_reports\"   public_folder <- \"public_reports\"   settings_folder <- \"report_settings\"    create_filesystem(     internal = internal_folder,     public = public_folder,     settings = settings_folder   ) } # }"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a monthly cross-section public report — create_public_report_month","title":"Create a monthly cross-section public report — create_public_report_month","text":"'create_public_report_month' creates public report given month.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a monthly cross-section public report — create_public_report_month","text":"","code":"create_public_report_month(cases, avgs, d_list, m, y, config, r_folder)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a monthly cross-section public report — create_public_report_month","text":"cases Dataframe. Disease case counts month year. Must columns: disease, year, month, counts. avgs Dataframe. Disease case count averages month. Must columns: disease, Jan, Feb, ... d_list Dataframe. List diseases use report. Must columns: EpiTrax_name, Public_name. m Integer. report month (1-12). y Integer. report year. config List. Settings use report. r_folder Filepath. Destination folder public report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a monthly cross-section public report — create_public_report_month","text":"List containing report name data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a monthly cross-section public report — create_public_report_month","text":"","code":"cases <- data.frame(   disease = c(\"A\",\"B\"),   year = 2024,   month = 1,   counts = c(10,20) ) avgs <- data.frame(disease = c(\"A\",\"B\"), Jan = c(5,15)) d_list <- data.frame(   EpiTrax_name = c(\"A\",\"B\"),   Public_name = c(\"Alpha\",\"Beta\") ) config <- list(   current_population = 100000,   avg_5yr_population = 100000,   rounding_decimals = 1,   generate_csvs = TRUE )  create_public_report_month(cases, avgs, d_list, 1, 2024, config, tempdir()) #> $name #> [1] \"public_report_Jan2024\" #>  #> $report #>   Disease Rate_per_100k Avg_5yr_Rate    Trend #> 1   Alpha            10            5 Elevated #> 2    Beta            20           15 Elevated #>"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_ytd.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a YTD public report — create_public_report_ytd","title":"Create a YTD public report — create_public_report_ytd","text":"'create_public_report_ytd' creates public report YTD rates.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_ytd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a YTD public report — create_public_report_ytd","text":"","code":"create_public_report_ytd(ytd_rates, d_list, config, r_folder)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_ytd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a YTD public report — create_public_report_ytd","text":"ytd_rates Dataframe. YTD case rates per 100k. Must columns: disease, Current_YTD_Rate_per_100k, Avg_5yr_YTD_Rate_per_100k. d_list Dataframe. List diseases use report. Must columns: EpiTrax_name, Public_name. config List. Settings use report. r_folder Filepath. Destination folder public report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_ytd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a YTD public report — create_public_report_ytd","text":"List containing report name data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_public_report_ytd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a YTD public report — create_public_report_ytd","text":"","code":"ytd_rates <- data.frame(   disease = c(\"A\",\"B\"),   Current_YTD_Rate_per_100k = c(12, 34),   Avg_5yr_YTD_Rate_per_100k = c(10, 30) ) d_list <- data.frame(   EpiTrax_name = c(\"A\",\"B\"),   Public_name = c(\"Alpha\",\"Beta\") ) config <- list(generate_csvs = TRUE) create_public_report_ytd(ytd_rates, d_list, config, tempdir()) #> $name #> [1] \"public_report_YTD\" #>  #> $report #>   Disease YTD_Rate_per_100k Avg_5yr_Rate    Trend #> 1   Alpha                12           10 Elevated #> 2    Beta                34           30 Elevated #>"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_annual_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create annual counts report — create_report_annual_counts","title":"Create annual counts report — create_report_annual_counts","text":"'create_report_annual_counts' generates data frame annual case counts disease, years columns.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_annual_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create annual counts report — create_report_annual_counts","text":"","code":"create_report_annual_counts(data, disease_names)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_annual_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create annual counts report — create_report_annual_counts","text":"data Dataframe. Input data columns: disease, year, counts. disease_names Character vector. List diseases include report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_annual_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create annual counts report — create_report_annual_counts","text":"Dataframe annual counts one row per disease one column per year.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_annual_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create annual counts report — create_report_annual_counts","text":"","code":"data <- data.frame(   disease = c(\"A\", \"A\", \"B\"),   year = c(2020, 2021, 2020),   counts = c(5, 7, 8) ) create_report_annual_counts(data, disease_names = c(\"A\", \"B\", \"C\")) #>   disease 2020 2021 #> 1       A    5    7 #> 2       B    8    0 #> 3       C    0    0"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_avgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create monthly averages report — create_report_monthly_avgs","title":"Create monthly averages report — create_report_monthly_avgs","text":"'create_report_monthly_avgs' generates data frame average monthly case counts disease across years input data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_avgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create monthly averages report — create_report_monthly_avgs","text":"","code":"create_report_monthly_avgs(data, disease_names, config)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_avgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create monthly averages report — create_report_monthly_avgs","text":"data Dataframe. Input data columns: disease, year, month, counts. disease_names Character vector. List diseases include report. config List. Settings use report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_avgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create monthly averages report — create_report_monthly_avgs","text":"Dataframe monthly averages one row per disease one column per month (Jan Dec).","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_avgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create monthly averages report — create_report_monthly_avgs","text":"","code":"data <- data.frame(   disease = c(\"A\", \"A\", \"B\", \"B\"),   year = c(2023, 2024, 2023, 2024),   month = c(1, 1, 2, 2),   counts = c(10, 20, 15, 25) ) config <- list(rounding_decimals = 1) create_report_monthly_avgs(data, c(\"A\", \"B\", \"C\"), config) #>   disease Jan Feb #> 1       A  15   0 #> 2       B   0  20 #> 3       C   0   0"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create monthly counts report — create_report_monthly_counts","title":"Create monthly counts report — create_report_monthly_counts","text":"'create_report_monthly_counts' generates data frame monthly case counts disease specific year, months columns.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create monthly counts report — create_report_monthly_counts","text":"","code":"create_report_monthly_counts(data, y, disease_names)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create monthly counts report — create_report_monthly_counts","text":"data Dataframe. Input data columns: disease, year, month, counts. y Integer. year generate report . disease_names Character vector. List diseases include report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create monthly counts report — create_report_monthly_counts","text":"Dataframe monthly counts one row per disease one column per month (Jan Dec).","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_monthly_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create monthly counts report — create_report_monthly_counts","text":"","code":"data <- data.frame(   disease = c(\"A\", \"A\", \"B\", \"B\"),   year = c(2024, 2024, 2024, 2023),   month = c(1, 2, 1, 4),   counts = c(5, 7, 8, 9) ) create_report_monthly_counts(data, 2024, disease_names = c(\"A\", \"B\", \"C\")) #>   disease Jan Feb #> 1       A   5   7 #> 2       B   8   0 #> 3       C   0   0"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_ytd_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create year-to-date (YTD) counts report — create_report_ytd_counts","title":"Create year-to-date (YTD) counts report — create_report_ytd_counts","text":"'create_report_ytd_counts' generates data frame year--date counts disease, comparing given year average years.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_ytd_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create year-to-date (YTD) counts report — create_report_ytd_counts","text":"","code":"create_report_ytd_counts(data, disease_names, y, m, config, as.rates = FALSE)"},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_ytd_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create year-to-date (YTD) counts report — create_report_ytd_counts","text":"data Dataframe. Input data columns: disease, year, month, counts. disease_names Character vector. List diseases include report. y Integer. Current report year. m Integer. Current report month (1-12). config List. Configuration current_population, avg_5yr_population, rounding_decimals settings. .rates Logical. TRUE, returns rates per 100k instead raw counts.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_ytd_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create year-to-date (YTD) counts report — create_report_ytd_counts","text":"Dataframe one row per disease columns current YTD average YTD values (either counts rates per 100k).","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/create_report_ytd_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create year-to-date (YTD) counts report — create_report_ytd_counts","text":"","code":"data <- data.frame(   disease = c(\"A\", \"A\", \"B\", \"B\"),   year = c(2024, 2023, 2024, 2023),   month = c(1, 1, 2, 2),   counts = c(10, 20, 15, 25) ) config <- list(   current_population = 100000,   avg_5yr_population = 100000,   rounding_decimals = 1 ) create_report_ytd_counts(data, c(\"A\", \"B\", \"C\"), 2024, 2, config) #>   disease Current_YTD_Counts Avg_5yr_YTD_Counts #> 1       A                 10                 20 #> 2       B                 15                 25 #> 3       C                  0                  0"},{"path":"https://epiforesite.github.io/epitraxr/reference/format_week_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Format input EpiTrax data — format_week_num","title":"Format input EpiTrax data — format_week_num","text":"'format_week_num' formats input EpiTrax dataset month numbers using field 'patient_mmwr_week' filters rows older five years.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/format_week_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format input EpiTrax data — format_week_num","text":"","code":"format_week_num(data)"},{"path":"https://epiforesite.github.io/epitraxr/reference/format_week_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format input EpiTrax data — format_week_num","text":"data Dataframe. Data format.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/format_week_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format input EpiTrax data — format_week_num","text":"formatted data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/format_week_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format input EpiTrax data — format_week_num","text":"","code":"df <- data.frame(patient_mmwr_year=2020L, patient_mmwr_week=1L, patient_disease=\"A\") format_week_num(df) #>   disease month year counts #> 1       A     1 2020      1"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_internal_disease_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the internal disease list — get_internal_disease_list","title":"Get the internal disease list — get_internal_disease_list","text":"'get_internal_disease_list' reads internal list given CSV file uses default diseases, file exist.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_internal_disease_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the internal disease list — get_internal_disease_list","text":"","code":"get_internal_disease_list(filepath, default_diseases)"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_internal_disease_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the internal disease list — get_internal_disease_list","text":"filepath Filepath. Internal disease list CSV file. default_diseases String vector. List default diseases use file exist.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_internal_disease_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the internal disease list — get_internal_disease_list","text":"dataframe containing diseases include public report name use disease public report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_internal_disease_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the internal disease list — get_internal_disease_list","text":"provided internal disease list file must contain one column EpiTrax disease names (EpiTrax_name) include internal reports.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_internal_disease_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the internal disease list — get_internal_disease_list","text":"","code":"if (FALSE) { # \\dontrun{   list_file <- \"path/to/file\"   default_list <- c(\"Measles\", \"Chickenpox\")    disease_list <- get_internal_disease_list(list_file, default_list) } # }"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_public_disease_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the public disease list — get_public_disease_list","title":"Get the public disease list — get_public_disease_list","text":"'get_public_disease_list' reads public list given CSV file uses default diseases file exist.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_public_disease_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the public disease list — get_public_disease_list","text":"","code":"get_public_disease_list(filepath, default_diseases)"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_public_disease_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the public disease list — get_public_disease_list","text":"filepath Filepath. Public disease list CSV file. default_diseases String vector. List default diseases use file exist.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_public_disease_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the public disease list — get_public_disease_list","text":"dataframe containing diseases include public report name use disease public report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_public_disease_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the public disease list — get_public_disease_list","text":"provided public disease list file must contain two columns map EpiTrax disease name public-facing name public report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_public_disease_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the public disease list — get_public_disease_list","text":"","code":"if (FALSE) { # \\dontrun{   list_file <- \"path/to/file\"   default_list <- c(\"Measles\", \"Chickenpox\")    disease_list <- get_public_disease_list(list_file, default_list) } # }"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Trend column of report — get_trend","title":"Get Trend column of report — get_trend","text":"'get_trend' compares values two columns produces new column containing trend result. trend represented strings: \"Elevated\" (increase), \"Less Expected\" (decrease), \"Expected\" (change).","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Trend column of report — get_trend","text":"","code":"get_trend(col1, col2)"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Trend column of report — get_trend","text":"col1 List. Current data. col2 List. Historical comparison data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Trend column of report — get_trend","text":"Character vector containing trend labels.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Trend column of report — get_trend","text":"","code":"get_trend(c(5, 10, 10), c(3, 10, 12)) #> [1] \"Elevated\"           \"Expected\"           \"Less Than Expected\""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_yrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique years from a data frame — get_yrs","title":"Get unique years from a data frame — get_yrs","text":"'get_yrs' extracts returns sorted unique years 'year' column data frame.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_yrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique years from a data frame — get_yrs","text":"","code":"get_yrs(data)"},{"path":"https://epiforesite.github.io/epitraxr/reference/get_yrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique years from a data frame — get_yrs","text":"data Dataframe. Must contain 'year' column.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_yrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique years from a data frame — get_yrs","text":"Integer vector sorted unique years present data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/get_yrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get unique years from a data frame — get_yrs","text":"","code":"df <- data.frame(year = c(2020, 2021, 2020, 2022)) get_yrs(df) #> [1] 2020 2021 2022"},{"path":"https://epiforesite.github.io/epitraxr/reference/prep_report_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for report — prep_report_data","title":"Prepare data for report — prep_report_data","text":"'prep_report_data' removes rows data appear report adds rows diseases report, input dataset. Added rows filled 0s.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/prep_report_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for report — prep_report_data","text":"","code":"prep_report_data(data, report_d_list)"},{"path":"https://epiforesite.github.io/epitraxr/reference/prep_report_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for report — prep_report_data","text":"data Dataframe. Current report data. report_d_list String vector. Diseases include report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/prep_report_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for report — prep_report_data","text":"Report data rows diseases report.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/prep_report_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for report — prep_report_data","text":"","code":"df <- data.frame(disease=c(\"A\",\"B\",\"D\"), counts=c(5,7,8)) prep_report_data(df, c(\"A\",\"C\")) #>   disease counts #> 1       A      5 #> 2       C      0"},{"path":"https://epiforesite.github.io/epitraxr/reference/read_epitrax_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in input EpiTrax data — read_epitrax_data","title":"Read in input EpiTrax data — read_epitrax_data","text":"'read_epitrax_data' reads EpiTrax data CSV, validates formats , returns data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/read_epitrax_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in input EpiTrax data — read_epitrax_data","text":"","code":"read_epitrax_data(data_file = NULL)"},{"path":"https://epiforesite.github.io/epitraxr/reference/read_epitrax_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in input EpiTrax data — read_epitrax_data","text":"data_file Optional filepath. Data file CSV. parameter NULL, user prompted choose file interactively.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/read_epitrax_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in input EpiTrax data — read_epitrax_data","text":"validated formatted EpiTrax data input file.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/read_epitrax_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in input EpiTrax data — read_epitrax_data","text":"","code":"if (FALSE) { # \\dontrun{ # Interactive file chooser: read_epitrax_data() # Using a file path: read_epitrax_data(\"path/to/epitrax.csv\") } # }"},{"path":"https://epiforesite.github.io/epitraxr/reference/read_report_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in the report config YAML file — read_report_config","title":"Read in the report config YAML file — read_report_config","text":"'read_report_config' reads config YAML file","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/read_report_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in the report config YAML file — read_report_config","text":"","code":"read_report_config(config_filepath)"},{"path":"https://epiforesite.github.io/epitraxr/reference/read_report_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in the report config YAML file — read_report_config","text":"config_filepath Filepath. Path report config file.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/read_report_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in the report config YAML file — read_report_config","text":"named list attribute 'keys' file.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/read_report_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in the report config YAML file — read_report_config","text":"","code":"if (FALSE) { # \\dontrun{   config_file <- \"path/to/config_file\"   report_config <- read_report_config(config_file) } # }"},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_annual_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape data frame with each year as a separate column — reshape_annual_wide","title":"Reshape data frame with each year as a separate column — reshape_annual_wide","text":"'reshape_annual_wide' reshapes given data frame diseases rows years columns.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_annual_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape data frame with each year as a separate column — reshape_annual_wide","text":"","code":"reshape_annual_wide(df)"},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_annual_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape data frame with each year as a separate column — reshape_annual_wide","text":"df Dataframe. Data reshape years columns. Must columns: disease, year, counts.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_annual_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape data frame with each year as a separate column — reshape_annual_wide","text":"reshaped data frame.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_annual_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape data frame with each year as a separate column — reshape_annual_wide","text":"","code":"df <- data.frame(   disease = c(\"A\", \"A\", \"B\"),   year = c(2020, 2021, 2020),   counts = c(5, 7, 8) ) reshape_annual_wide(df) #>   disease 2020 2021 #> 1       A    5    7 #> 3       B    8    0"},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_monthly_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape data frame with each month as a separate column — reshape_monthly_wide","title":"Reshape data frame with each month as a separate column — reshape_monthly_wide","text":"'reshape_monthly_wide' reshapes given data frame diseases rows months columns.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_monthly_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape data frame with each month as a separate column — reshape_monthly_wide","text":"","code":"reshape_monthly_wide(df)"},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_monthly_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape data frame with each month as a separate column — reshape_monthly_wide","text":"df Dataframe. Data reshape months columns.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_monthly_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape data frame with each month as a separate column — reshape_monthly_wide","text":"reshaped data frame.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/reshape_monthly_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape data frame with each month as a separate column — reshape_monthly_wide","text":"","code":"df <- data.frame(disease=c(\"A\",\"B\"), month=c(1,2), counts=c(5,6)) reshape_monthly_wide(df) #>   disease Jan Feb #> 1       A   5   0 #> 3       B   0   6"},{"path":"https://epiforesite.github.io/epitraxr/reference/set_na_0.html","id":null,"dir":"Reference","previous_headings":"","what":"Set NA values to 0 — set_na_0","title":"Set NA values to 0 — set_na_0","text":"'set_na_0' sets NA values 0 data frame.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/set_na_0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set NA values to 0 — set_na_0","text":"","code":"set_na_0(df)"},{"path":"https://epiforesite.github.io/epitraxr/reference/set_na_0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set NA values to 0 — set_na_0","text":"df Dataframe.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/set_na_0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set NA values to 0 — set_na_0","text":"Dataframe NA values replaced 0.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/set_na_0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set NA values to 0 — set_na_0","text":"","code":"df <- data.frame(year = c(2020, NA, 2022)) set_na_0(df) #>   year #> 1 2020 #> 2    0 #> 3 2022"},{"path":"https://epiforesite.github.io/epitraxr/reference/validate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input EpiTrax data — validate_data","title":"Validate input EpiTrax data — validate_data","text":"'validate_data' checks data expected columns data types, removes unneeded columns, returns resulting data.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/validate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input EpiTrax data — validate_data","text":"","code":"validate_data(data)"},{"path":"https://epiforesite.github.io/epitraxr/reference/validate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input EpiTrax data — validate_data","text":"data Dataframe. EpiTrax data validate.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/validate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input EpiTrax data — validate_data","text":"validated data unneeded columns removed.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/validate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate input EpiTrax data — validate_data","text":"","code":"df <- data.frame(patient_mmwr_year=2020L, patient_mmwr_week=1L, patient_disease=\"A\") validate_data(df) #>   patient_mmwr_year patient_mmwr_week patient_disease #> 1              2020                 1               A"},{"path":"https://epiforesite.github.io/epitraxr/reference/write_report_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write report CSV files — write_report_csv","title":"Write report CSV files — write_report_csv","text":"write_report_csv writes given data specified folder given filename.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/write_report_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write report CSV files — write_report_csv","text":"","code":"write_report_csv(data, filename, folder)"},{"path":"https://epiforesite.github.io/epitraxr/reference/write_report_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write report CSV files — write_report_csv","text":"data Dataframe. Report data. filename String. Report filename. folder Filepath. Report destination folder.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/write_report_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write report CSV files — write_report_csv","text":"NULL.","code":""},{"path":"https://epiforesite.github.io/epitraxr/reference/write_report_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write report CSV files — write_report_csv","text":"","code":"if (FALSE) { # \\dontrun{   r_data <- data.frame(     Disease = c(\"Measles\", \"Chickenpox\"),     Counts = c(20, 43)   )   r_file <- \"report.csv\"   r_folder <- \"reports\"    write_report_csv(r_data, r_file, r_folder) } # }"}]
